package com.sky.algorithmleetcode;

/*
已有方法 rand7 可生成 1 到 7 范围内的均匀随机整数，试写一个方法 rand10 生成 1 到 10 范围内的均匀随机整数。 不要使用系统的 Math
.random() 方法。     示例 1:  输入: 1 输出: [7]  示例 2:  输入: 2 输出: [8,4]  示例 3:  输入: 3 输出:
 [8,1,10]    提示:  	rand7 已定义。 	传入参数: n 表示 rand10 的调用次数。    进阶:  	rand7()调用次数的 期望
值 是多少 ? 	你能否尽量少调用 rand7() ?
*/

题目描述：

已有方法 rand7 可以生成 1 到 7 范围内的均匀随机整数，试写一个方法 rand10 生成 1 到 10 范围内的均匀随机整数。不要使用系统的 Math.random() 方法。
示例 1:
输入: 1
输出: [7]
示例 2:
输入: 2
输出: [8,4]
示例 3:
输入: 3
输出: [8,1,10]

提示:
rand7 已定义。
传入参数: n 表示 rand10 的调用次数。

进阶:
rand7()调用次数的期望值是多少 ?
你能否尽量少调用 rand7() ?

算法思路：

Q1. 为什么rand7(rand7()-1)可以得到1-49中的每个数字?

在1-7中每个数字出现的概率是相等的，都是1/7。在1-49中每个数字出现的概率也是相等的！
对所有数字进行分类：
分类1：对于1-42，很好理解，每个数字出现的概率都是1/49，不再讨论；
分类2：对于43-49，考虑 7 * (rand7() -1) ，出现43、44、45、46、47、48、49的概率分别为 1/7、1/7、1/7、1/7、1/7、1/7、1/7，所以7 * (rand7() -1) % 10得到0-9中的一个等概率随机数，再加上33即可得到43-49中的一个等概率随机数；
两分类的概率都是1/49，所以可以保证1-49中每个数字的概率是相等的。

Q2. 为什么不考虑重复的数字？

我们需要得到的是[1,10]中的等概率随机数，因为rand7每次可以生成的随机数是1-7，所以在最差的情况下，我们需要等到rand7()生成的数字都不超过5，这样就能保证 (rand7() - 1) * 7 + rand7() 产生的数字在[1,49]中被均匀随机选取的概率最高，可以很好的完成题目的要求。

代码实现：

package leetcode;

class L470Solution extends SolBase {
    public int rand10() {
        while (true) {
            int num = (rand7()-1)*7 + rand7();//得到1-49的随机数
            if (num <= 40) {//num是40以内的，现在我们要得到1-10的等概率随机数
                return num % 10 + 1;//+1保证我们得到的随机数在1-10之间
            } 
        }
    }
}

class SolBase {
    public int rand7() {
        //这里没有具体实现rand7方法，需要根据题目自己实现
    }
} 