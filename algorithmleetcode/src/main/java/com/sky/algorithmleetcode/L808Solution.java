package com.sky.algorithmleetcode;

/*
有 A 和 B 两种类型的汤。一开始每种类型的汤有 N 毫升。有四种分配操作：  	提供 100ml 的汤A 和 0ml 的汤B。 	提供 75ml 的汤A 和
 25ml 的汤B。 	提供 50ml 的汤A 和 50ml 的汤B。 	提供 25ml 的汤A 和 75ml 的汤B。  当我们把汤分配给某人之后，汤就没有了
。每个回合，我们将从四种概率同为0.25的操作中进行分配选择。如果汤的剩余量不足以完成某次操作，我们将尽可能分配。当两种类型的汤都分配完时，停止操作。 注意不存
在先分配100 ml汤B的操作。 需要返回的值： 汤A先分配完的概率 + 汤A和汤B同时分配完的概率 / 2。  示例: 输入: N = 50 输出: 0.62
5 解释: 如果我们选择前两个操作，A将首先变为空。对于第三个操作，A和B会同时变为空。对于第四个操作，B将首先变为空。 所以A变为空的总概率加上A和B同时变为
空的概率的一半是 0.25 *(1 + 1 + 0.5 + 0)= 0.625。  注释:  	0 。 	 	返回值在 10^-6 的范围将被认为是正确的。
*/

 class L808Solution {
    public double soupServings(int N) {
        // 如果N很大，则相同的操作将被执行多次，因此将N除以25，留待后续操作使用
        N = (N + 24) / 25;
        
        // 如果N非常大，即N>480，则答案接近1，因此直接返回1即可
        if (N >= 20) {
            return 1.0;
        }
        
        // 初始化dp数组
        // 注意：我们不需要初始化为0，因为默认值是0.0
        double[][] dp = new double[N + 1][N + 1];
        
        // 初始化 dp[0][0] 为0.5，表示两种汤都为空的概率为1
        dp[0][0] = 0.5;
        
        // 初始化 dp[0][i] 和 dp[i][0]
        for (int i = 1; i <= N; i++) {
            dp[0][i] = 1.0;
            dp[i][0] = 0.0;  // 注意这里，dp[i][0] 永远是0，表示汤B为空的概率为0
        }
        
        // 计算dp数组的剩余部分
        // 注意循环的顺序，这个顺序很重要
        // i的枚举从1到N，j的枚举是从1到N，不包括汤B零时状态，即dp[i][0]
        for (int i = 1; i <= N; i++) {
            for (int j = 1; j <= N; j++) {
                dp[i][j] = 0.25 * (dp[max(i - 4, 0)][j]
                                   + dp[max(i - 3, 0)][max(j - 1, 0)]
                                   + dp[max(i - 2, 0)][max(j - 2, 0)]
                                   + dp[max(i - 1, 0)][max(j - 3, 0)]);
            }
        }
        
        // 返回最终答案
        return dp[N][N];
    }
    
    // 辅助方法，用于获取两个数的最大值
    private static int max(int a, int b) {
        return Math.max(a, b);
    }
} 