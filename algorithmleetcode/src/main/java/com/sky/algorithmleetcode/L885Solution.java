package com.sky.algorithmleetcode;

/*
在 R 行 C 列的矩阵上，我们从 (r0, c0) 面朝东面开始 这里，网格的西北角位于第一行第一列，网格的东南角位于最后一行最后一列。 现在，我们以顺时针按
螺旋状行走，访问此网格中的每个位置。 每当我们移动到网格的边界之外时，我们会继续在网格之外行走（但稍后可能会返回到网格边界）。 最终，我们到过网格的所有 R *
 C 个空间。 按照访问顺序返回表示网格位置的坐标列表。   示例 1： 输入：R = 1, C = 4, r0 = 0, c0 = 0 输出：[[0,0],[
0,1],[0,2],[0,3]]     示例 2： 输入：R = 5, C = 6, r0 = 1, c0 = 4 输出：[[1,4],[1,5],[2,5
],[2,4],[2,3],[1,3],[0,3],[0,4],[0,5],[3,5],[3,4],[3,3],[3,2],[2,2],[1,2],[0,2],
[4,5],[4,4],[4,3],[4,2],[4,1],[3,1],[2,1],[1,1],[0,1],[4,0],[3,0],[2,0],[1,0],[0
,0]]     提示：  	1 	1 	0 	0
*/

 L885Solution {
    public int[][] spiralMatrixIII(int R, int C, int r0, int c0) {
        int[][] result = new int[R*C][2];
        int[][] dirs = {{0,1},{1,0},{0,-1},{-1,0}}; // 顺时针方向：右、下、左、上
        int dir = 0; // 当前方向
        int count = 0; // 已经走过的格子数
        int step = 1; // 当前走的步数
        int[] curPos = {r0, c0}; // 当前位置
        while (count < R*C) {
            // 当前方向需要走 step 步
            for (int i = 0; i < step; i++) {
                if (curPos[0] >=0 && curPos[0] < R && curPos[1] >= 0 && curPos[1] < C) { // 判断当前位置是否合法
                    result[count][0] = curPos[0];
                    result[count][1] = curPos[1];
                    count++;
                }
                curPos[0] += dirs[dir][0];
                curPos[1] += dirs[dir][1];
            }
            // 转向
            dir = (dir + 1) % 4;
            // 如果是向右或向左行走，则步数增加
            if (dir == 0 || dir == 2) {
                step++;
            }
        }
        return result;
    }
} 